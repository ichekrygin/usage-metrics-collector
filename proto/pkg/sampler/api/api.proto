syntax = "proto3";

package containerd.api;
option go_package="./api";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "grpc/health/health.proto";

service Metrics {
  rpc ListMetrics (ListMetricsRequest) returns (ListMetricsResponse) {
    option (google.api.http) = { get: "/v1/metrics" };
  }

rpc RegisterCollectors (RegisterCollectorsRequest) returns (RegisterCollectorsResponse) {
  option (google.api.http) = {
      post: "/v1/register"
      body: "*"
    };
  }
}

message RegisterCollectorsRequest {
  repeated Collector collectors=1;
  string source=2;
  string fromPod=3;
}

message Collector {
  string ipAddress=1;
  string podName=2;
}

message RegisterCollectorsResponse {
  repeated string ipAddresses=1;
}

service Health {
  rpc Check(grpc.health.v1.HealthCheckRequest) returns (grpc.health.v1.HealthCheckResponse) {
    option (google.api.http) = { get: "/v1/healthz" };
  }

   rpc IsReady(grpc.health.v1.HealthCheckRequest) returns (grpc.health.v1.HealthCheckResponse) {
      option (google.api.http) = { get: "/v1/is-ready" };
   }
}

message ListMetricsRequest  {}

message ListMetricsResponse {
  repeated ContainerMetrics containers=1;
  NodeMetrics node=2;
  string nodeName=3;
  string podName=4;
  google.protobuf.Timestamp timestamp = 5;
  string reason = 6;
}

message ContainerMetrics {
  // nextID: 23

  string containerID = 1;
  string podUID = 2;
  string containerName = 12;
  string podName = 13;
  string namespaceName = 14;

  repeated int64 cpuCoresNanoSec = 3;
  repeated int64 memoryBytes = 4;
  repeated int64 cpuThrottledNanoSec = 7;
  repeated float cpuPercentPeriodsThrottled = 8;
  repeated int64 cpuPeriodsSec = 9;
  repeated int64 cpuThrottledPeriodsSec = 10;

  string nodeName = 11;

  int64 avgCPUCoresNanoSec = 15;

  int64 avgMemoryBytes = 16;
  int64 oomCount = 17;
  int64 oomKillCount = 18;

  float avgCPUPercentPeriodsThrottled = 19;
  int64 avgCPUThrottledNanoSec = 20;
  int64 avgCPUPeriodsSec = 21;
  int64 avgCPUThrottledPeriodsSec = 22;
}

message NodeMetrics {
    repeated NodeAggregatedMetrics aggregatedMetrics=1;
}

message NodeAggregatedMetrics {
    string aggregationLevel=1;
    repeated int64 cpuCoresNanoSec=2;
    repeated int64 memoryBytes=3;

    int64 avgCPUCoresNanoSec=4;
    int64 avgMemoryBytes=5;
}

service MetricsCollector {
   rpc PushMetrics (stream ListMetricsResponse) returns (stream ConfigurePush) {
   }
}

message ConfigurePush {
}
